.XS
Images can be combined
.XA
Algebraic Combination
.XE
.NH
Images Can Be Combined
.PP
There are a a lot of situations where combining images is desired.
In graphics design,
artists usually create parts of the scene individually and then combine them into a single images.
In the movie industries,
scenes are shot indoors and then superimposed onto a suitable background.
Here, 
methods used to combine images are discussed.
.PP
when combining images,
two conditions must be met:-
.IP 1 3
the images must be defined on the same support (i.e. they must have the same dimensions)
.IP 2
the images must take values on the same color space
.NH 2
Combining Images Algebraically
.PP
Images form a vector space,
one method of combining images is linear combination.
where, given the images $f sub n$,
the composite image $f$ can be defined as follows
.EQ
f = sum from i { {c sub i} {f sub i} } 
.EN
where $c sub i$ are constants.
That definition can be further extended if the constants are replaced with real-valued functions $alpha sub i$ as follows
.EQ
f = sum from i { {alpha sub i} {f sub i} }
.EN 
where $alpha sub i$ are real-valued functions, defined on the images' support.
it is clear that the first definition is a special case from the second one,
by defining the functions as constants over the images' support.
in the second definition,
the functions $alpha sub i$ must satisfy two conditions in order for that combination to be well-behaved
.IP 1
$alpha sub i (x, y) >= 0$
.IP 2
$sum from i {alpha sub i} = 1$
.PP
if the functions $alpha sub i$ do not satisfy these condtions, then new functions $beta sub i$ can be defined as follows
.EQ
beta sub i = {alpha sub i} over { sum from i { alpha sub i } }
.EN
these new functions will satisfy the conditions.
.PP
the functions $alpha sub i$ are said to form
.I "a partition of unity" .
.PP
If the functions $alpha sub i$ are constant over the domain of the images' support,
this operation is called
.I "mixing the images" .
one particular example is 
.I "cross-dissolving" ,
given 2 images $f$ and $g$,
a sequence of images can be defined as follows
.EQ
h sub t = (1 - t)f + tg
.EN
.EQ
.EN
when $t = 0$, $h sub 0 = f$
when $t = 1$, $h sub 1 = g$
for other values, 
each point of the resulting images is a weighted average from the two other images at the same point.
an example of cross-dissolving is shown in Figure 7.1
.PSPIC "./7-1.ps"
.B "Figure 7.1"
.NH 2
Combining Images by Decomposing the Domain
.PP
Another way of combining images,
is by putting different parts of different images.
that is,
given a set of images $f sub n$ defined on the same images support $U$,
the image support $U$ is 
.I "decomposed" into
m subsets ${U sub 1}, {U sub 2}, ..., {U sub m}$.
each image of $f sub i$ is associated with a subset of the image support $U sub i$,
so that only that part of that image in $U sub i$ appears in the output image.
.PP
At the first glance,
algebraic combining and combining by domain decomposition may seem like two different methods of image combination,
but in reality, they are the same.
Given a decomposition of the domain $U$ into m subsets,
one can define the following
.I "characteristic function" 
$chi sub {U sub i}$
.EQ
chi sub {U sub i} (x, y) = left { pile {
{1 ~~ (x, y) ~ \[u2208] ~ {U sub i}}
above
{0 ~~ (x, y) ~ \[u2209] ~ {U sub i}}
} ""
.EN

The resulting image can be defined as a linear combination of the images $f sub i$, 
using the functions $chi sub {U sub i}$ as weights.
.EQ
f = sum from i {chi sub {U sub i}} {f sub i}
.EN
the functions $chi sub {U sub i}$ defines a (discontinuous) partition of unity of the image support $U$.
.PP
It may also seem like there are multiple ways of decomposing the domain of images.
but a natural way, 
is to decompose the domain into a 
.I "foreground"
and a 
.I "background" .
The foreground is where the 
.I "main objects"
are located.
and the background serves as a 
.I "visual aid"
for the foreground.
Dividing the image support into a foreground and background has the effect of decomposing the domain into two subsets $U sub f$ and $U sub b$.
The output image can be defined as 
.EQ
f(x, y) = left { pile {
{ f sub 1 (x, y) ~~ (x, y) ~ \[u2208] ~ U sub i }
above
{ f sub 2 (x, y) ~~ (x, y) ~ \[u2209] ~ U sub i }
} ""
.EN
This operation is refered to as
.I "overlaying"
$f sub 1$ on $f sub 2$.
Overlaying can be defined as a partition of unity by the two functions $alpha sub f = chi sub {U sub f}$ and $alpha sub b = 1 - {alpha sub f}$.
.NH 2
Combining Images in the Discrete Domain
.PP
We mentioned that in combining images,
the images must have the same image support and takes values in the same color space.
In the discrete domain,
the images must be discretized using the same grid and the color information must be quantized using the same number of bits.
.PP
when combining images using mixing or cross-dissolving.
combination of images in the discrete domain is trivial, 
we just work pixel by pixel.
combining the sampled values of each image.
.PP
However, 
when combining by domain decomposition like foreground-background decomposition,
we need to consider how the domain subsets behave inside each pixel.
In the continuous domain,
a point is either in the foreground or the background.
But, in the discrete domain,
a pixel can lay in the boundary of the subsets.
This is a sampling problem.
Pixels in the boundary needs special treating,
in order to reduce artifacts.
.PP
In order to figure out how to deal with the pixels in the boundary.
the notion of overlaying images is extended by defining 
.I "the opacity function"
that defines how opaque the pixel is.
using the opacity function,
overlaying can be thought of as having different opacities of the foreground in different parts of the image.
foreground pixels have an opacity of $alpha sub f = 1$,
background pixels have an opacity of $alpha sub f = 0$.
and most importantly,
pixels that lay between the foreground and background have opacity equal to the fraction of the area laying in the opaque region.
using the opacity function,
overlaying can be defined as follows
.EQ
f = alpha f sub 1 + ( 1 - alpha ) f sub 2
.EN
this extended definition allows for greater versatility in overlaying.
.PP
Since the notion of opacity is very useful.
ususally,
opacity information of each pixel is stored in the image itself.
Images that allow for opacity store their color as $( {alpha} r, alpha g, alpha b, {alpha} )$,
where $0 <= alpha <= 1$ is the opacity of the pixel.
.NH 2
Computation of the Opacity Function
.PP
Now that opacity has been defined,
methods of calculating it must be specified.
How opacity is calculated depends on the type of image.
.SH
Synthetic Two-Dimensional Images
.PP
These are images created using a drawing software.
usually,
these programs allows the user to specify the opacity of a stroke along the color.
.SH
Synthetic Three-Dimensional Images
.PP
These are images created using a modeling software.
Since the software has access to the geometric data of the scene,
the opacity can be determined accurately.
.SH
Scanned Images
.PP
Scanned images are images that are captured from the real world,
like a photograph.
Scanned images contains no information but color.
So,
if opacity is desired,
it must be deduced from the image's color information.
.NH 2
Compositing in the Discrete Domain
.PP
when combining two images $f$ and $g$ in the discrete domain,
we need to combine their alpha channel.
The alpha channel does not remember the pixel geometry,
as it only stores the fraction of the pixel that is opaque.
Therefore,
several assumptions has to be made in order to combine the alpha channels.
Figure 7.2
.[
main
.]
shows 3 possible pixel geometries,
in (a),
the regions do not overlap.
in (b),
one region is completely contained in the other.
in (c),
the two regions partially intersect.
Figure 7.2(c) shows the general pixel geometry,
which we use to calculate the opacity of the resulting pixel.
.PP
the general pixel geometry consists of 4 regions.
$f inter g$, 
$f bar inter g$,
$f inter g bar$,
$f bar inter g bar$,
where the bar indicates set complement (see figure 7.3).
the opacity of each region is calculated as follows
.IP 1
for $f inter g$, $alpha = { alpha sub f } { alpha sub g }$
.IP 2
for $f bar inter g$, $alpha = (1 - { alpha sub f }) { alpha sub g }$
.IP 3
for $f inter g bar$, $alpha = { alpha sub f } (1 - { alpha sub g })$
.IP 4
for $f bar inter g bar$, $alpha = (1 - { alpha sub f }) (1 - { alpha sub g })$
.PSPIC "7-2.ps"
.B "Figure 7.2, Possible Pixel Geometries"
.PSPIC "7-3.ps"
.B "Figure 7.3, Regions of the General Pixel Geometries"
